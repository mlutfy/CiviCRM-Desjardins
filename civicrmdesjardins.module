<?php

/**
 * Implementation of hook_init()
 */
function civicrmdesjardins_init() {
  if (arg(0) == 'civicrm' && arg(1) == 'contribute') {
    drupal_add_css(drupal_get_path('module', 'civicrmdesjardins') . '/civicrmdesjardins.css');
    drupal_add_js(drupal_get_path('module', 'civicrmdesjardins') . '/civicrmdesjardins.js');
  }
}

/**
 * Implementation of hook_civicrm_config()
 */
function civicrmdesjardins_civicrm_config(&$config) {
  // set extention path to this module's directory
  $config =& CRM_Core_Config::singleton( );
  $config->extensionsDir = drupal_get_path('module', 'civicrmdesjardins') . '/extensions/';
}

/**
 * Implementation of hook_menu()
 */
function civicrmdesjardins_menu() {
  $items['civicrmdesjardins/validate'] = array(
    'title' => 'CiviCRM Desjardins transaction validation',
    'description' => 'Responds to Desjardins transaction pings to see if they are valid.',
    'page callback' => 'civicrmdesjardins_validate',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Receives the confirmation request from Desjardins using POST
 */
function civicrmdesjardins_validate() {
  if (! isset($GLOBALS['HTTP_RAW_POST_DATA'])) {
    echo 'Error: validation request not found';
    drupal_exit();
  }

  $data_received = stripslashes($GLOBALS['HTTP_RAW_POST_DATA']);
  $data_received = strstr($data_received,'<');

  // load the Desjardins extention
  civicrm_initialize(TRUE);
  require_once 'CRM/Core/Payment.php';
  module_load_include('php', 'civicrmdesjardins', 'extensions/org.civicrm.payment.desjardins/Desjardins');

  $r = new CRM_Core_Payment_Desjardins_Response('Confirm', $data_received);
  $txinfo = $r->getData();

  civicrmdesjardins_logxml($txinfo->merchant->confirm->transaction['id'], $data_received, 'confirm request');
  civicrmdesjardins_send_confirmation($txinfo);

  unset($r);
  drupal_exit();
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrmdesjardins_civicrm_buildForm($formName, &$form) {
  /*
   * Donation forms
   */
  if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
    //
    // Format amount 10.00$ to 10$
    //
    $amounts  =& $form->getElement('amount');
    $elements =& $amounts->getElements();

    foreach ($elements as $key => $val) {
      $text = $elements[$key]->getText();
      $text = preg_replace('/\.00 \$/', ' $', $text);
      $elements[$key]->setText($text);
    }
  }

  if ($formName == 'CRM_Contribute_Form_Contribution_Main' || $formName == 'CRM_Event_Form_Registration_Register') {
    //
    // Disable the CVV2 field
    // Note: you also have to hide it from templates in CRM/Core/BillingBlock.tpl
    // this only removes the requirement to fill in the cvv2 field
    //  
    // [ML] removing it causes the form to loop back without an error message (?!)
    // $form->removeElement('cvv2');
    $cvv2 =& $form->getElement('cvv2');
    $cvv2->setValue('000');
  }
}

/**
 * hook_civicrm_tokens() implementation
 * expose the "receipt" token to email messages
 */
function civicrmdesjardins_civicrm_tokens(&$tokens) {
  $tokens['contribution'] = array(
    'contribution.desjardins_receipt' => 'Desjardins CC receipt',
  );
}

/**
 * hook_civicrm_tokenValues() implementation
 */
function civicrmdesjardins_civicrm_tokenValues( &$details, &$contactIDs ) {
  $value = array();

  // Prepare the contact ID(s) for use in a database query
  //
  // [ML]Â this is based on an example from the civi book
  // In our context of contrib receipts, having multiple contactIDs does
  // not make sense, but leaving the code just in case.
  if ( is_array( $contactIDs ) ) {
    $id_contact = $contactIDs['contact_id'];
    watchdog('civicrmdesjardins', 'Sending email receipt for contact ID: ' . $id_contact . ' (A)');
  } else {
    $id_contact = $contactIDs;
    watchdog('civicrmdesjardins', 'Sending email receipt for contact ID: ' . $id_contact . ' (B)');
  }

  // Fetch the receipt (assume latest)
  $tx = db_query("select invoice_id from {civicrm_contribution} where contact_id = :id order by receive_date desc limit 1", array(':id' => $id_contact))->fetchField();
  $receipt = db_query("select receipt from {civicrmdesjardins_receipt} where trx_id = :tx", array(':tx' => $tx))->fetchField();

  $details['contribution.desjardins_receipt'] = $receipt;
}

function civicrmdesjardins_send_confirmation($tx) {
  header('Content-Type: text/xml');
  header('Cache-Control: no-cache, must-revalidate'); // HTTP/1.1
  header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past

  // TODO: this should probably check that the transaction
  // is really being processed
  $response = '<?xml version="1.0" encoding="ISO-8859-15"?>'."\n";
  $response .= '<response>' . "\n";
  $response .= '  <merchant id="' . $tx->merchant['id'] . '">' . "\n";
  $response .= '    <transaction id="' . $tx->merchant->confirm->transaction['id'] . '" accepted="yes" />' . "\n";
  $response .= '  </merchant>'."\n";
  $response .= '</response>'."\n";

  civicrmdesjardins_logxml($tx->merchant->confirm->transaction['id'], $response, 'confirm response');
  echo $response;
}

function civicrmdesjardins_logxml($trx_id, $message, $type, $fail = 0) {
  $time = time();
  $message = preg_replace('/<number>(\d{2})\d{10}(\d{4})<\/number>/', '<number>\1**********\2</number>', $message);

  if (! $trx_id) {
    watchdog('civicrmdesjardins', 'No trx_id found, cannot write the log: ' . check_plain($message), 'error');
    return;
  }

  db_query("INSERT INTO {civicrmdesjardins_log} (trx_id, timestamp, type, message, fail, ip)
            VALUES (:trx_id, :timestamp, :type, :message, :fail, :ip)",
            array(':trx_id' => $trx_id, ':timestamp' => $time, ':type' => $type, ':message' => $message, ':fail' => $fail, ':ip' => $_SERVER['REMOTE_ADDR']));
}


